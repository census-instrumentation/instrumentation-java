buildscript {
  dependencies {
    classpath 'net.sf.proguard:proguard-gradle:5.3.3'
  }
}

plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.0'
}

description = 'OpenCensus Agent'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def agentPackage = 'io.opencensus.contrib.agent'
def agentMainClass = "${agentPackage}.AgentMain"

// The package containing the classes that need to be loaded by the bootstrap classloader because
// they are used from classes loaded by the bootstrap classloader.
def agentBootstrapPackage = "${agentPackage}.bootstrap"
def agentBootstrapPackageDir = agentBootstrapPackage.replace('.', '/') + '/'
def agentBootstrapClasses = agentBootstrapPackageDir + '**'

// The package to which which we relocate all third party packages. This avoids any conflicts of
// the agent's classes with the app's classes, which are loaded by the same classloader (the system
// classloader).
def agentRepackaged = "${agentPackage}.deps"

dependencies {
  compileOnly libraries.grpc_context
  testCompile libraries.grpc_context
  compile libraries.guava
  compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'
  compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.7.1'

  signature 'org.codehaus.mojo.signature:java17:+@signature'
}

jar {
  manifest {
    // Set the required manifest attributes for the Java agent, cf.
    // https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html.
    attributes 'Premain-Class': agentMainClass
    attributes 'Can-Retransform-Classes': true

    // Let the java plugin use the overridden values instead of the root project's values.
    attributes 'Source-Compatibility': sourceCompatibility
    attributes 'Target-Compatibility': targetCompatibility
  }
}

// Create bootstrap.jar containing the classes that need to be loaded by the bootstrap
// classloader.
task bootstrapJar(type: Jar) {
  // Output to 'bootstrap.jar'.
  baseName = 'bootstrap'
  version = null

  from sourceSets.main.output
  include agentBootstrapClasses
}

shadowJar.dependsOn bootstrapJar

// Bundle the agent's classes and dependencies into a single, self-contained JAR file.
shadowJar {
  // Output to opencensus-agent-VERSION.jar.
  baseName = 'opencensus-agent'
  classifier = null

  // Include only the following dependencies (excluding transitive dependencies).
  dependencies {
    include(dependency('net.bytebuddy:byte-buddy'))
    include(dependency(libraries.guava))
  }

  // Exclude cruft which still snuck in.
  exclude 'META-INF/maven/**'
  exclude agentBootstrapClasses

  // Relocate third party packages to avoid any conflicts of the agent's classes with the app's
  // classes, which are loaded by the same classloader (the system classloader).
  relocate 'net.bytebuddy', agentRepackaged + '.bytebuddy'
  relocate 'com.google.common', agentRepackaged + '.guava'
  relocate 'com.google.thirdparty.publicsuffix', agentRepackaged + '.publicsuffix'

  doLast {
    // Bundle bootstrap.jar.
    ant.jar(update: 'true', destfile: shadowJar.archivePath) {
      mappedresources {
        fileset(file: bootstrapJar.archivePath)
        globmapper(from: '*', to: agentPackage.replace('.', '/') + '/bootstrap.jar')
      }
    }

    // Assert that there's nothing unexpected left outside of ${agentPackage}.
    def agentPackageDir = agentPackage.replace('.', '/') + '/'
    def agentBootstrapJar = agentPackageDir + 'bootstrap.jar'

    // Bundle bootstrap.jar.
    ant.jar(update: 'true', destfile: shadowJar.archivePath) {
      mappedresources {
        fileset(file: bootstrapJar.archivePath)
        globmapper(from: '*', to: agentBootstrapJar)
      }
    }

    // Assert that there's nothing obviously wrong with the JAR's contents.
    new java.util.zip.ZipFile(shadowJar.archivePath).withCloseable {
      // Must have bundled the bootstrap.jar.
      assert it.entries().any { it.name = agentBootstrapJar }

      it.entries().each {
        // Must not contain anything outside of ${agentPackage}, except for the manifest.
        assert it.name.startsWith(agentPackageDir) ||
               (it.isDirectory() && agentPackageDir.startsWith(it.name)) ||
               it.name == 'META-INF/' ||
               it.name == 'META-INF/MANIFEST.MF'
        // Also, should not have the bootstrap classes.
        assert !it.name.startsWith(agentBootstrapPackageDir)
      }
    }
  }
}

jar.finalizedBy shadowJar

task proguard(type: proguard.gradle.ProGuardTask) {
  def tmpJar = "${buildDir}/libs/tmp.jar"

  injars shadowJar.archivePath
  outjars tmpJar

  // Classes which are not bundled in the agent's JAR, but used at runtime.
  libraryjars System.getProperty('java.home') + '/lib/rt.jar'
  libraryjars bootstrapJar.archivePath
  configurations.compileOnly.each {
    libraryjars it
  }

  // Don't warn about classes and annotations which are not needed at runtime and which I don't
  // bother putting into libraryjars.
  dontwarn 'io.opencensus.contrib.agent.deps.bytebuddy.jar.asm.**'
  dontwarn 'com.google.j2objc.annotations.*'
  dontwarn 'edu.umd.cs.findbugs.annotations.SuppressFBWarnings'
  dontwarn 'javax.annotation.*'
  dontwarn 'javax.annotation.concurrent.*'
  dontwarn 'org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement'

  // TODO(stschmidt): Keep less.
  keep """public class io.opencensus.contrib.agent.AgentMain { 
            public static void premain(java.lang.String, java.lang.instrument.Instrumentation);
          }"""
  keep """class io.opencensus.contrib.agent.* {
            private *;
          }"""
  keep """class io.opencensus.contrib.agent.deps.bytebuddy.asm.** {
            *;
          }"""
  keep """class io.opencensus.contrib.agent.deps.bytebuddy.implementation.bytecode.assign.** {
            *;
          }"""

  // Workaround https://sourceforge.net/p/proguard/bugs/462/.
  optimizations '!code/allocation/variable'

  // Don't obfuscate or optimize yet. POLA.
  dontobfuscate
  // dontoptimize

  doLast {
    ant.move(file: tmpJar, tofile: shadowJar.archivePath)
  }
}

shadowJar.finalizedBy proguard

// TODO(stschmidt): Move the integration tests to a separate SourceSet once
// https://github.com/johnrengelman/shadow/issues/297 is fixed.
test {
  jvmArgs "-javaagent:${shadowJar.archivePath}"
}
